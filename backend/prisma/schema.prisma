generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuizType {
  PERFIL
  SIMULACAO
  TESTE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
  SCALE
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String    @unique
  phone        String?
  city         String?
  nearestUnit  String?
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  visitante     Visitante?
  intercambista Intercambista?
  admin         Admin?
  quizResults   QuizResult[]
}

model Visitante {
  userId            Int   @id
  quizProfileResult Json?
  simulationResult  Json?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Intercambista {
  userId                Int   @id
  emergencyContactName  String?
  emergencyContactPhone String?
  contractId            Int?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Admin {
  userId       Int   @id
  internalRole String

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Program {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  durationWeeks Int?
  country       String?
  price         Decimal  @db.Decimal(14,2)
  requirements  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Novos campos detalhados
  focus         String?  // Foco do programa
  method        String?  // Método de ensino
  type          String?  // Tipo do programa
  workload      String?  // Carga horária
  languageLevel String?  // Nível do idioma
  minAge        Int?     // Idade mínima
  maxAge        Int?     // Idade máxima
  minDuration   Int?     // Duração mínima em semanas
  maxDuration   Int?     // Duração máxima em semanas
  priceRange    String?  // Faixa de preço
  
  // Critérios para matching do quiz
  targetAgeRange    String?  // Faixa etária alvo
  purpose           String?  // Propósito (idioma, estudo, trabalho, férias)
  durationRange     String?  // Duração preferida
  companionshipType String?  // Tipo de companhia
  englishLevel      String?  // Nível de inglês necessário
  
  quizRecommendations QuizRecommendation[]
  recommendedInResults QuizResult[] @relation("RecommendedProgram")
}

model Quiz {
  id        Int       @id @default(autoincrement())
  title     String
  type      QuizType?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  questions QuizQuestion[]
  results   QuizResult[]
}

model QuizQuestion {
  id            Int          @id @default(autoincrement())
  quizId        Int
  question      String
  questionType  QuestionType @default(SINGLE_CHOICE)
  options       Json?        // Array de opções
  correctOption String?      // Para quizzes com resposta correta
  isRequired    Boolean      @default(true)
  order         Int          // Ordem da pergunta
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([order])
}

model QuizResult {
  id         Int      @id @default(autoincrement())
  userId     Int
  quizId     Int
  score      Int?
  resultData Json?    // Respostas detalhadas
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Campos específicos para análise
  ageRange        String?
  purpose         String?  // o que busca no intercâmbio
  durationRange   String?  // máximo de tempo
  companionship   String?  // sozinho ou acompanhado
  englishLevel    String?  // nível de inglês
  priceRange      String?  // faixa de preço
  
  // Recomendação
  recommendedProgramId Int?
  recommendationScore  Float?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  recommendedProgram Program? @relation("RecommendedProgram", fields: [recommendedProgramId], references: [id])
  
  recommendations QuizRecommendation[]

  @@index([userId])
  @@index([quizId])
  @@index([recommendedProgramId])
}

// Tabela para histórico de recomendações
model QuizRecommendation {
  id        Int      @id @default(autoincrement())
  quizResultId Int
  programId    Int
  score        Float   // Pontuação da recomendação
  reason       String? // Motivo da recomendação
  createdAt    DateTime @default(now())
  
  quizResult QuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  program    Program    @relation(fields: [programId], references: [id], onDelete: Cascade)
  
  @@index([quizResultId])
  @@index([programId])
  @@index([score])
}
