#!/bin/bash
# Script principal de desenvolvimento - Canada Interc√¢mbio
# Uso: ./scripts/dev.sh [comando] [argumentos]

set -euo pipefail  # Parar execu√ß√£o em caso de erro, undefined variables ou pipe failures

# Configura√ß√µes do projeto
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
readonly BACKEND_SERVICE="backend"
readonly FRONTEND_SERVICE="frontend"
readonly DB_NAME="canada_intercambio_db"

# Cores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly MAGENTA='\033[0;95m'
readonly NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC} ${timestamp} - $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} ${timestamp} - $message" ;;
        "WARNING") echo -e "${YELLOW}[WARNING]${NC} ${timestamp} - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" ;;
        "DEBUG") echo -e "${PURPLE}[DEBUG]${NC} ${timestamp} - $message" ;;
    esac
}

# Fun√ß√£o para exibir banner
show_banner() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                           ‚ïë"
    echo "‚ïë                 üçÅ CANADA INTERC√ÇMBIO üçÅ                  ‚ïë"
    echo "‚ïë                Scripts de Desenvolvimento                 ‚ïë"
    echo "‚ïë                                                           ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para exibir ajuda
show_help() {
    show_banner
    echo ""
    echo -e "${YELLOW}Uso:${NC} ./scripts/dev.sh [comando] [argumentos]"
    echo ""
    echo -e "${YELLOW}üê≥ Comandos Docker:${NC}"
    echo "  up              - Iniciar todos os servi√ßos"
    echo "  down            - Parar todos os servi√ßos"
    echo "  restart         - Reiniciar todos os servi√ßos"
    echo "  rebuild         - Rebuild e restart dos containers"
    echo "  logs [servi√ßo]  - Ver logs (padr√£o: todos os servi√ßos)"
    echo "  status          - Status dos containers"
    echo ""
    echo -e "${YELLOW}üóÑÔ∏è  Comandos Banco de Dados:${NC}"
    echo "  db:setup        - Configura√ß√£o inicial do banco de dados"
    echo "  db:migrate      - Executar migrations do banco"
    echo "  db:push         - Sincronizar schema com o banco"
    echo "  db:list         - Listar todas as migrations dispon√≠veis"
    echo "  db:reset        - Reset completo do banco (cuidado!)"
    echo "  db:seed         - Executar dados iniciais (seed)"
    echo "  db:studio       - Abrir Prisma Studio (interface visual)"
    echo "  db:backup       - Criar backup do banco de dados"
    echo "  db:restore      - Restaurar backup do banco"
    echo "  db:info         - Informa√ß√µes de conex√£o e configura√ß√£o"
    echo ""
    echo -e "${YELLOW}üîß Comandos Desenvolvimento:${NC}"
    echo "  setup           - Configura√ß√£o inicial completa do projeto"
    echo "  dev             - Iniciar modo desenvolvimento (watch)"
    echo "  build           - Build do projeto completo"
    echo "  test            - Executar todos os testes"
    echo "  lint            - Executar verifica√ß√£o de c√≥digo (linting)"
    echo "  format          - Formatar c√≥digo automaticamente"
    echo ""
    echo -e "${YELLOW}üì± Comandos Frontend:${NC}"
    echo "  frontend:dev    - Iniciar frontend em modo desenvolvimento"
    echo "  frontend:build  - Build do aplicativo frontend"
    echo "  frontend:ios    - Executar aplicativo no iOS"
    echo "  frontend:android - Executar aplicativo no Android"
    echo ""
    echo -e "${YELLOW}üõ†Ô∏è  Comandos Utilit√°rios:${NC}"
    echo "  fresh           - Rein√≠cio completo do ambiente (down + up + migrate)"
    echo "  watch           - Modo desenvolvimento com hot reload ativo"
    echo "  shell [servi√ßo] - Acesso ao shell de um container espec√≠fico"
    echo "  clean           - Limpar cache e arquivos tempor√°rios"
    echo "  clean:images    - Remover todas as imagens Docker"
    echo "  clean:volumes   - Remover todos os volumes Docker"
    echo "  clean:all       - Limpeza completa (containers, imagens e volumes)"
    echo "  health          - Diagn√≥stico completo da sa√∫de do sistema"
    echo "  pgadmin         - Informa√ß√µes de acesso ao pgAdmin"
    echo "  help            - Exibir esta mensagem de ajuda"
    echo ""
    echo -e "${YELLOW}Exemplos Principais:${NC}"
    echo "  ./scripts/dev.sh setup          # Configura√ß√£o inicial completa"
    echo "  ./scripts/dev.sh up             # Iniciar todos os servi√ßos"
    echo "  ./scripts/dev.sh watch          # Desenvolvimento com hot reload"
    echo "  ./scripts/dev.sh db:migrate     # Executar migrations"
    echo "  ./scripts/dev.sh health         # Verificar status do sistema"
    echo ""
    echo -e "${PURPLE}üí° Dica: Execute ${CYAN}'./scripts/dev.sh health'${PURPLE} para verificar o status do sistema${NC}"
    echo ""
    
    # Verifica√ß√£o r√°pida de status
    if [ -f "docker-compose.yml" ] && command -v docker &> /dev/null && docker info &> /dev/null; then
        if docker compose ps --services --filter status=running 2>/dev/null | grep -q .; then
            echo -e "${GREEN}‚úÖ Containers est√£o rodando${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Containers n√£o est√£o rodando - use ${CYAN}'./scripts/dev.sh up'${YELLOW} para iniciar${NC}"
        fi
    else
        echo -e "${RED}‚ùå Docker n√£o est√° dispon√≠vel ou docker-compose.yml n√£o encontrado${NC}"
    fi
    echo ""
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log "INFO" "Verificando depend√™ncias do sistema..."
    
    local missing_deps=()
    local optional_deps=()
    local system_ok=true
    
    # Depend√™ncias obrigat√≥rias
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
        system_ok=false
    else
        # Verificar se Docker daemon est√° rodando
        if ! docker info &> /dev/null; then
            log "ERROR" "Docker est√° instalado mas o daemon n√£o est√° rodando"
            system_ok=false
        else
            log "SUCCESS" "‚úÖ Docker: $(docker --version | cut -d' ' -f3 | cut -d',' -f1)"
        fi
    fi
    
    # Verificar Docker Compose (nova sintaxe ou plugin)
    if ! docker compose version &> /dev/null; then
        if ! command -v docker-compose &> /dev/null; then
            missing_deps+=("docker-compose")
            system_ok=false
        else
            log "SUCCESS" "‚úÖ Docker Compose (standalone): $(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)"
        fi
    else
        log "SUCCESS" "‚úÖ Docker Compose (plugin): $(docker compose version --short)"
    fi
    
    # Depend√™ncias √∫teis (n√£o obrigat√≥rias)
    if ! command -v curl &> /dev/null; then
        optional_deps+=("curl")
    else
        log "SUCCESS" "‚úÖ curl: $(curl --version | head -1 | cut -d' ' -f2)"
    fi
    
    if ! command -v jq &> /dev/null; then
        optional_deps+=("jq")
    else
        log "SUCCESS" "‚úÖ jq: $(jq --version)"
    fi
    
    if ! command -v node &> /dev/null; then
        optional_deps+=("node")
    else
        log "SUCCESS" "‚úÖ Node.js: $(node --version)"
    fi
    
    if ! command -v npm &> /dev/null; then
        optional_deps+=("npm")
    else
        log "SUCCESS" "‚úÖ npm: $(npm --version)"
    fi
    
    # Verificar Git
    if ! command -v git &> /dev/null; then
        optional_deps+=("git")
    else
        log "SUCCESS" "‚úÖ Git: $(git --version | cut -d' ' -f3)"
    fi
    
    # Verificar ferramentas de rede
    if ! command -v netstat &> /dev/null && ! command -v ss &> /dev/null; then
        optional_deps+=("net-tools ou iproute2 (para verificar portas)")
    fi
    
    # Verificar se pode executar comandos com privil√©gios (se necess√°rio)
    if groups 2>/dev/null | grep -q docker; then
        log "SUCCESS" "‚úÖ Usu√°rio est√° no grupo docker"
    else
        log "WARNING" "‚ö†Ô∏è  Usu√°rio n√£o est√° no grupo docker - pode precisar de sudo"
    fi
    
    # Reportar resultados
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log "ERROR" "‚ùå Depend√™ncias obrigat√≥rias ausentes:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        echo -e "${YELLOW}üìã Instru√ß√µes de instala√ß√£o:${NC}"
        echo "  ‚Ä¢ Docker: https://docs.docker.com/get-docker/"
        echo "  ‚Ä¢ Docker Compose: https://docs.docker.com/compose/install/"
        echo ""
        exit 1
    fi
    
    if [ ${#optional_deps[@]} -ne 0 ]; then
        log "WARNING" "‚ö†Ô∏è  Depend√™ncias opcionais ausentes (recomendadas):"
        for dep in "${optional_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        echo -e "${YELLOW}üí° Para melhor experi√™ncia, instale:${NC}"
        echo "  sudo apt update && sudo apt install -y curl jq nodejs npm git net-tools"
        echo ""
    fi
    
    if [ "$system_ok" = true ]; then
        log "SUCCESS" "‚úÖ Todas as depend√™ncias obrigat√≥rias est√£o dispon√≠veis"
    fi
    
    return 0
}

# Fun√ß√£o para verificar se os containers est√£o rodando
check_containers() {
    log "DEBUG" "Verificando status dos containers..."
    
    cd "$PROJECT_DIR"
    
    # Verificar se o arquivo docker-compose.yml existe
    if [ ! -f "docker-compose.yml" ]; then
        log "ERROR" "Arquivo docker-compose.yml n√£o encontrado no diret√≥rio do projeto"
        return 1
    fi
    
    # M√©todo mais robusto para verificar containers
    local containers_running=false
    local services_status=""
    
    # Tentar usar docker compose ps primeiro (m√©todo preferido)
    if command -v docker &> /dev/null && docker info &> /dev/null; then
        if docker compose version &> /dev/null 2>&1; then
            # Usar docker compose (plugin)
            if services_status=$(docker compose ps --services --filter status=running 2>/dev/null); then
                if [ -n "$services_status" ]; then
                    containers_running=true
                    log "DEBUG" "Containers rodando (compose plugin): $services_status"
                fi
            fi
        elif command -v docker-compose &> /dev/null; then
            # Usar docker-compose (standalone)
            if services_status=$(docker-compose ps --services --filter status=running 2>/dev/null); then
                if [ -n "$services_status" ]; then
                    containers_running=true
                    log "DEBUG" "Containers rodando (compose standalone): $services_status"
                fi
            fi
        fi
        
        # M√©todo alternativo: verificar containers por nome do projeto
        if [ "$containers_running" = false ]; then
            local project_name=$(basename "$PROJECT_DIR" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
            local running_containers=$(docker ps --filter "name=${project_name}" --format "{{.Names}}" 2>/dev/null)
            if [ -n "$running_containers" ]; then
                containers_running=true
                log "DEBUG" "Containers encontrados por nome do projeto: $running_containers"
            fi
        fi
        
        # M√©todo final: verificar containers nas portas conhecidas
        if [ "$containers_running" = false ]; then
            if docker ps --filter "publish=3000" --filter "publish=5432" --filter "publish=8080" --format "{{.Names}}" 2>/dev/null | grep -q .; then
                containers_running=true
                log "DEBUG" "Containers encontrados nas portas do projeto"
            fi
        fi
    else
        log "ERROR" "Docker n√£o est√° dispon√≠vel ou o daemon n√£o est√° rodando"
        return 1
    fi
    
    if [ "$containers_running" = true ]; then
        log "DEBUG" "Containers do projeto est√£o rodando"
        return 0
    else
        log "DEBUG" "Nenhum container do projeto est√° rodando"
        return 1
    fi
}

# Fun√ß√£o para aguardar servi√ßos ficarem prontos
wait_for_services() {
    log "INFO" "Aguardando servi√ßos ficarem prontos..."
    
    # Aguardar banco de dados
    local retries=30
    while [ $retries -gt 0 ]; do
        if docker compose exec postgres pg_isready -q; then
            log "SUCCESS" "Banco de dados est√° pronto"
            break
        fi
        retries=$((retries - 1))
        sleep 2
    done
    
    if [ $retries -eq 0 ]; then
        log "ERROR" "Timeout aguardando banco de dados"
        exit 1
    fi
    
    # Aguardar backend
    sleep 5
    log "SUCCESS" "Servi√ßos est√£o prontos"
}

# Fun√ß√£o para executar comando no container
run_in_container() {
    local service="$1"
    shift
    cd "$PROJECT_DIR"
    docker compose exec "$service" "$@"
}

# Comandos Docker
cmd_up() {
    log "INFO" "Iniciando servi√ßos..."
    cd "$PROJECT_DIR"
    docker compose up -d
    wait_for_services
    log "SUCCESS" "Servi√ßos iniciados com sucesso!"
    echo ""
    echo -e "${MAGENTA}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${MAGENTA}‚ïë                    üçÅ SERVI√áOS ATIVOS üçÅ                    ‚ïë${NC}"
    echo -e "${MAGENTA}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${GREEN}üöÄ Backend API:${NC}"
    echo -e "   ${BLUE}URL:${NC} http://localhost:3000"
    echo -e "   ${BLUE}Health:${NC} http://localhost:3000/health"
    echo ""
    echo -e "${GREEN}üóÑÔ∏è  Banco de Dados PostgreSQL:${NC}"
    echo -e "   ${BLUE}Host:${NC} localhost"
    echo -e "   ${BLUE}Port:${NC} 5432"
    echo -e "   ${BLUE}Database:${NC} $DB_NAME"
    echo -e "   ${BLUE}User:${NC} postgres"
    echo -e "   ${BLUE}Password:${NC} 123456"
    echo ""
    echo -e "${GREEN}üîß pgAdmin (Interface Web):${NC}"
    echo -e "   ${BLUE}URL:${NC} http://localhost:8080"
    echo -e "   ${BLUE}Email:${NC} admin@admin.com"
    echo -e "   ${BLUE}Password:${NC} admin"
    echo ""
    echo -e "${YELLOW}üí° Configura√ß√£o pgAdmin:${NC}"
    echo -e "   1. Acesse http://localhost:8080"
    echo -e "   2. Login: admin@admin.com / admin"
    echo -e "   3. Add New Server:"
    echo -e "      ‚Ä¢ Nome: Canada Intercambio"
    echo -e "      ‚Ä¢ Host: postgres (nome do container)"
    echo -e "      ‚Ä¢ Port: 5432"
    echo -e "      ‚Ä¢ Database: $DB_NAME"
    echo -e "      ‚Ä¢ Username: postgres"
    echo -e "      ‚Ä¢ Password: 123456"
    echo ""
    echo -e "${YELLOW}üì± Pr√≥ximos passos:${NC}"
    echo -e "   ‚Ä¢ üî• Hot Reload: ${CYAN}./scripts/dev.sh watch${NC} (recomendado!)"
    echo -e "   ‚Ä¢ Frontend: ${CYAN}./scripts/dev.sh frontend:dev${NC}"
    echo -e "   ‚Ä¢ Prisma Studio: ${CYAN}./scripts/dev.sh db:studio${NC}"
    echo -e "   ‚Ä¢ Dev Mode: ${CYAN}./scripts/dev.sh dev${NC}"
    echo ""
    echo -e "${GREEN}üî• HOT RELOAD CONFIGURADO!${NC}"
    echo -e "   ‚Ä¢ Edite ${CYAN}schema.prisma${NC} ‚Üí mudan√ßas refletem automaticamente"
    echo -e "   ‚Ä¢ Edite arquivos ${CYAN}.ts/.js${NC} ‚Üí servidor reinicia automaticamente"
    echo ""
}

cmd_down() {
    log "INFO" "Parando servi√ßos..."
    cd "$PROJECT_DIR"
    docker compose down
    log "SUCCESS" "Servi√ßos parados"
}

cmd_restart() {
    log "INFO" "Reiniciando servi√ßos..."
    cmd_down
    cmd_up
}

cmd_rebuild() {
    log "INFO" "Rebuild dos containers..."
    cd "$PROJECT_DIR"
    docker compose down
    docker compose build --no-cache
    docker compose up -d
    wait_for_services
    log "SUCCESS" "Rebuild completo!"
}

cmd_logs() {
    local service="${1:-}"
    cd "$PROJECT_DIR"
    
    if [ -n "$service" ]; then
        log "INFO" "Logs do servi√ßo: $service"
        docker compose logs -f "$service"
    else
        log "INFO" "Logs de todos os servi√ßos"
        docker compose logs -f
    fi
}

cmd_status() {
    log "INFO" "Status detalhado dos containers:"
    cd "$PROJECT_DIR"
    
    echo ""
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}                    STATUS DOS CONTAINERS${NC}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    
    # Status do docker compose
    if docker compose ps --format "table {{.Service}}\t{{.State}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null; then
        echo ""
    else
        log "ERROR" "Erro ao obter status dos containers"
        return 1
    fi
    
    # Informa√ß√µes adicionais
    echo -e "${YELLOW}üìä Informa√ß√µes Adicionais:${NC}"
    
    # Verificar se as portas est√£o sendo usadas
    if command -v netstat &> /dev/null; then
        echo -e "${BLUE}üîå Portas em uso:${NC}"
        netstat -ln 2>/dev/null | grep -E ":(3000|5432|8080) " | while read line; do
            port=$(echo "$line" | grep -oE ":(3000|5432|8080)" | tr -d ':')
            case "$port" in
                3000) echo "   ‚Ä¢ Porta 3000: Backend API" ;;
                5432) echo "   ‚Ä¢ Porta 5432: PostgreSQL" ;;
                8080) echo "   ‚Ä¢ Porta 8080: pgAdmin" ;;
            esac
        done
        echo ""
    fi
    
    # Links √∫teis
    echo -e "${GREEN}üîó Links √öteis:${NC}"
    if docker compose ps --services --filter status=running | grep -q backend; then
        echo -e "   ‚Ä¢ Backend: ${CYAN}http://localhost:3000${NC}"
        echo -e "   ‚Ä¢ API Health: ${CYAN}http://localhost:3000/health${NC}"
        echo -e "   ‚Ä¢ API Docs: ${CYAN}http://localhost:3000/docs${NC}"
    fi
    
    if docker compose ps --services --filter status=running | grep -q pgadmin; then
        echo -e "   ‚Ä¢ pgAdmin: ${CYAN}http://localhost:8080${NC}"
        echo -e "     User: admin@admin.com | Pass: admin"
    fi
    
    echo ""
    echo -e "${PURPLE}üí° Comandos √∫teis:${NC}"
    echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh health${NC} - Diagn√≥stico completo"
    echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh logs${NC} - Ver logs dos containers"
    echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh logs [servi√ßo]${NC} - Logs de um servi√ßo espec√≠fico"
    echo ""
}

# Comandos de Banco de Dados
cmd_db_setup() {
    log "INFO" "Configura√ß√£o inicial do banco de dados..."
    check_containers
    
    run_in_container "$BACKEND_SERVICE" npx prisma generate
    run_in_container "$BACKEND_SERVICE" npx prisma migrate dev --name init
    
    log "SUCCESS" "Banco de dados configurado!"
}

cmd_db_migrate() {
    local name="${1:-}"
    log "INFO" "Executando migrations..."
    check_containers
    
    if [ -n "$name" ]; then
        run_in_container "$BACKEND_SERVICE" npx prisma migrate dev --name "$name"
    else
        run_in_container "$BACKEND_SERVICE" npx prisma migrate dev
    fi
    
    log "SUCCESS" "Migrations executadas!"
}

cmd_db_reset() {
    log "WARNING" "‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° apagar todos os dados do banco!"
    read -p "Tem certeza que deseja continuar? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "INFO" "Resetando banco de dados..."
        check_containers
        run_in_container "$BACKEND_SERVICE" npx prisma migrate reset --force
        log "SUCCESS" "Banco resetado!"
    else
        log "INFO" "Opera√ß√£o cancelada"
    fi
}

cmd_db_push() {
    log "INFO" "Push do schema para banco..."
    check_containers
    run_in_container "$BACKEND_SERVICE" npx prisma db push
    log "SUCCESS" "Schema enviado para banco!"
}

cmd_db_seed() {
    log "INFO" "Executando seed..."
    check_containers
    
    if run_in_container "$BACKEND_SERVICE" test -f prisma/seed.ts || run_in_container "$BACKEND_SERVICE" test -f prisma/seed.js; then
        run_in_container "$BACKEND_SERVICE" npx prisma db seed
        log "SUCCESS" "Seed executado!"
    else
        log "WARNING" "Arquivo de seed n√£o encontrado"
    fi
}

cmd_db_studio() {
    log "INFO" "Abrindo Prisma Studio..."
    check_containers
    echo -e "${YELLOW}Prisma Studio: http://localhost:5555${NC}"
    run_in_container "$BACKEND_SERVICE" npx prisma studio
}

cmd_db_backup() {
    local backup_name="backup_$(date +%Y%m%d_%H%M%S).sql"
    log "INFO" "Criando backup: $backup_name"
    
    cd "$PROJECT_DIR"
    mkdir -p backups
    
    docker compose exec postgres pg_dump -U postgres $DB_NAME > "backups/$backup_name"
    log "SUCCESS" "Backup criado: backups/$backup_name"
}

cmd_db_restore() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        log "ERROR" "Especifique o arquivo de backup"
        echo "Uso: ./scripts/dev.sh db:restore <arquivo_backup>"
        return 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        log "ERROR" "Arquivo de backup n√£o encontrado: $backup_file"
        return 1
    fi
    
    log "WARNING" "‚ö†Ô∏è  Isso ir√° substituir todos os dados atuais!"
    read -p "Tem certeza? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "INFO" "Restaurando backup..."
        check_containers
        
        cd "$PROJECT_DIR"
        docker compose exec -T postgres psql -U postgres -d $DB_NAME < "$backup_file"
        log "SUCCESS" "Backup restaurado!"
    else
        log "INFO" "Opera√ß√£o cancelada"
    fi
}

cmd_db_info() {
    log "INFO" "Informa√ß√µes de conex√£o do banco de dados"
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                üóÑÔ∏è  INFORMA√á√ïES DO BANCO üóÑÔ∏è                 ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${GREEN}üìä Conex√£o Direta PostgreSQL:${NC}"
    echo -e "   ${BLUE}Host:${NC} localhost"
    echo -e "   ${BLUE}Port:${NC} 5432"
    echo -e "   ${BLUE}Database:${NC} $DB_NAME"
    echo -e "   ${BLUE}Username:${NC} postgres"
    echo -e "   ${BLUE}Password:${NC} 123456"
    echo ""
    echo -e "${GREEN}üîó String de Conex√£o:${NC}"
    echo -e "   ${YELLOW}postgresql://postgres:123456@localhost:5432/$DB_NAME${NC}"
    echo ""
    echo -e "${GREEN}üîß pgAdmin (Interface Web):${NC}"
    echo -e "   ${BLUE}URL:${NC} http://localhost:8080"
    echo -e "   ${BLUE}Email:${NC} admin@admin.com"
    echo -e "   ${BLUE}Password:${NC} admin"
    echo ""
    echo -e "${YELLOW}üí° Para conectar via pgAdmin:${NC}"
    echo -e "   1. Acesse: ${CYAN}http://localhost:8080${NC}"
    echo -e "   2. Login com: ${CYAN}admin@admin.com${NC} / ${CYAN}admin${NC}"
    echo -e "   3. Clique em 'Add New Server'"
    echo -e "   4. Configure:"
    echo -e "      ‚Ä¢ ${BLUE}Name:${NC} Canada Intercambio"
    echo -e "      ‚Ä¢ ${BLUE}Host name/address:${NC} postgres"
    echo -e "      ‚Ä¢ ${BLUE}Port:${NC} 5432"
    echo -e "      ‚Ä¢ ${BLUE}Maintenance database:${NC} $DB_NAME"
    echo -e "      ‚Ä¢ ${BLUE}Username:${NC} postgres"
    echo -e "      ‚Ä¢ ${BLUE}Password:${NC} 123456"
    echo ""
    echo -e "${YELLOW}üõ†Ô∏è  Comandos √∫teis:${NC}"
    echo -e "   ‚Ä¢ Prisma Studio: ${CYAN}./scripts/dev.sh db:studio${NC}"
    echo -e "   ‚Ä¢ Ver logs do DB: ${CYAN}./scripts/dev.sh logs postgres${NC}"
    echo -e "   ‚Ä¢ Shell do DB: ${CYAN}./scripts/dev.sh shell postgres${NC}"
    echo ""
}

cmd_db_list() {
    log "INFO" "Listando migrations..."
    check_containers
    
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                  üìÅ MIGRATIONS DO PROJETO üìÅ              ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    # Verificar se existe pasta de migrations
    if ! run_in_container "$BACKEND_SERVICE" test -d prisma/migrations; then
        echo -e "${RED}‚ùå Pasta de migrations n√£o encontrada${NC}"
        echo -e "${YELLOW}üí° Execute: ${CYAN}./scripts/dev.sh db:migrate${NC} para criar o primeiro migration"
        return 0
    fi
    
    # Listar migrations
    local migrations_output
    migrations_output=$(run_in_container "$BACKEND_SERVICE" find prisma/migrations -type d -name "*_*" | sort)
    
    if [ -z "$migrations_output" ]; then
        echo -e "${RED}‚ùå Nenhum migration encontrado${NC}"
        echo -e "${YELLOW}üí° Execute: ${CYAN}./scripts/dev.sh db:migrate nome_do_migration${NC}"
        return 0
    fi
    
    # Processar e exibir migrations
    local counter=1
    while IFS= read -r migration_path; do
        if [ -n "$migration_path" ]; then
            local migration_name=$(basename "$migration_path")
            local timestamp=$(echo "$migration_name" | cut -d'_' -f1)
            local name_part=$(echo "$migration_name" | cut -d'_' -f2- | tr '_' ' ')
            
            # Status do SQL
            local sql_status="‚ùå"
            if run_in_container "$BACKEND_SERVICE" test -f "$migration_path/migration.sql"; then
                sql_status="‚úÖ"
            fi
            
            echo -e "${YELLOW}${counter}.${NC} ${BLUE}${name_part}${NC}"
            echo -e "    ${GREEN}üìÖ${NC} ${timestamp} ${GREEN}üìÑ${NC} ${sql_status}"
            
            counter=$((counter + 1))
        fi
    done <<< "$migrations_output"
    
    # Exibir total e comandos √∫teis
    local total=$((counter - 1))
    echo ""
    echo -e "${GREEN}üìä Total: ${total} migrations${NC}"
    echo ""
    echo -e "${YELLOW}üí° Comandos:${NC}"
    echo -e "   ‚Ä¢ Novo migration: ${CYAN}./scripts/dev.sh db:migrate nome${NC}"
    echo -e "   ‚Ä¢ Reset migrations: ${CYAN}./scripts/dev.sh db:reset${NC}"
    echo -e "   ‚Ä¢ Status detalhado: ${CYAN}./scripts/dev.sh shell backend${NC} ‚Üí ${CYAN}npx prisma migrate status${NC}"
    echo ""
}

# Comandos de Desenvolvimento
cmd_setup() {
    log "INFO" "üöÄ Configura√ß√£o inicial completa..."
    
    check_dependencies
    
    # Build containers
    log "INFO" "Building containers..."
    cd "$PROJECT_DIR"
    docker compose build
    
    # Start services
    cmd_up
    
    # Setup database
    cmd_db_setup
    
    # Run seed
    log "INFO" "Executando seed inicial..."
    cmd_db_seed
    
    # Install frontend dependencies
    if [ -d "$PROJECT_DIR/frontend" ]; then
        log "INFO" "Instalando depend√™ncias do frontend..."
        cd "$PROJECT_DIR/frontend"
        npm install
    fi
    
    log "SUCCESS" "‚úÖ Setup completo!"
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë            üéâ PROJETO CANADA INTERC√ÇMBIO PRONTO! üéâ        ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${YELLOW}üéØ Pr√≥ximos passos:${NC}"
    echo -e "1. üåê Backend: ${CYAN}http://localhost:3000${NC}"
    echo -e "2. üóÑÔ∏è  pgAdmin: ${CYAN}http://localhost:8080${NC} (admin@admin.com/admin)"
    echo -e "3. üé® Prisma Studio: ${CYAN}./scripts/dev.sh db:studio${NC}"
    echo -e "4. üì± Frontend: ${CYAN}./scripts/dev.sh frontend:dev${NC}"
    echo -e "5. üíª Dev Mode: ${CYAN}./scripts/dev.sh dev${NC}"
    echo ""
    echo -e "${YELLOW}üìö Comandos √∫teis:${NC}"
    echo -e "‚Ä¢ ${CYAN}./scripts/dev.sh help${NC} - Ver todos os comandos"
    echo -e "‚Ä¢ ${CYAN}./scripts/dev.sh db:migrate${NC} - Executar migrations"
    echo -e "‚Ä¢ ${CYAN}./scripts/dev.sh db:list${NC} - Listar migrations"
    echo -e "‚Ä¢ ${CYAN}./scripts/dev.sh fresh${NC} - Rein√≠cio completo"
    echo -e "‚Ä¢ ${CYAN}./scripts/dev.sh db:info${NC} - Infos do banco"
    echo ""
}

cmd_dev() {
    log "INFO" "Iniciando modo desenvolvimento..."
    check_containers
    
    # Start backend in watch mode
    run_in_container "$BACKEND_SERVICE" npm run dev
}

cmd_build() {
    log "INFO" "Building projeto..."
    cd "$PROJECT_DIR"
    
    # Build backend
    log "INFO" "Building backend..."
    run_in_container "$BACKEND_SERVICE" npm run build
    
    # Build frontend
    if [ -d "$PROJECT_DIR/frontend" ]; then
        log "INFO" "Building frontend..."    
        cd "$PROJECT_DIR/frontend"
        npm run build
    fi
    
    log "SUCCESS" "Build completo!"
}

cmd_test() {
    log "INFO" "Executando testes..."
    check_containers
    
    # Backend tests
    run_in_container "$BACKEND_SERVICE" npm test
    
    # Frontend tests
    if [ -d "$PROJECT_DIR/frontend" ]; then
        cd "$PROJECT_DIR/frontend"
        npm test
    fi
}

cmd_lint() {
    log "INFO" "Executando linting..."
    
    # Backend lint
    run_in_container "$BACKEND_SERVICE" npm run lint
    
    # Frontend lint
    if [ -d "$PROJECT_DIR/frontend" ]; then
        cd "$PROJECT_DIR/frontend"
        npm run lint
    fi
}

cmd_format() {
    log "INFO" "Formatando c√≥digo..."
    
    # Backend format
    run_in_container "$BACKEND_SERVICE" npm run format
    
    # Frontend format
    if [ -d "$PROJECT_DIR/frontend" ]; then
        cd "$PROJECT_DIR/frontend"
        npm run format
    fi
}

# Comandos Frontend
cmd_frontend_dev() {
    log "INFO" "Iniciando frontend em desenvolvimento..."
    cd "$PROJECT_DIR/frontend"
    npm start
}

cmd_frontend_build() {
    log "INFO" "Building frontend..."
    cd "$PROJECT_DIR/frontend"
    npm run build
}

cmd_frontend_ios() {
    log "INFO" "Executando no iOS..."
    cd "$PROJECT_DIR/frontend"
    npm run ios
}

cmd_frontend_android() {
    log "INFO" "Executando no Android..."
    cd "$PROJECT_DIR/frontend"
    npm run android
}

# Comandos Utilit√°rios
cmd_clean() {
    log "INFO" "Limpando cache e arquivos tempor√°rios..."
    
    cd "$PROJECT_DIR"
    
    # Clean Docker
    docker system prune -f
    
    # Clean node_modules
    find . -name "node_modules" -type d -prune -exec rm -rf {} +
    find . -name ".next" -type d -prune -exec rm -rf {} +
    
    # Clean backend
    if [ -d "backend" ]; then
        cd backend
        rm -rf dist/ build/ .cache/
        cd ..
    fi
    
    # Clean frontend  
    if [ -d "frontend" ]; then
        cd frontend
        rm -rf .expo/ dist/ build/
    fi
    
    log "SUCCESS" "Limpeza completa!"
}

cmd_clean_images() {
    log "WARNING" "‚ö†Ô∏è  Isso ir√° remover TODAS as imagens Docker!"
    read -p "Tem certeza que deseja continuar? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "INFO" "Removendo todas as imagens Docker..."
        
        # Parar containers primeiro
        cd "$PROJECT_DIR"
        docker compose down 2>/dev/null || true
        
        # Remover todas as imagens
        if docker images -q | wc -l | grep -q "0"; then
            log "INFO" "Nenhuma imagem encontrada"
        else
            docker rmi $(docker images -q) -f 2>/dev/null || true
            log "SUCCESS" "Todas as imagens Docker removidas!"
        fi
    else
        log "INFO" "Opera√ß√£o cancelada"
    fi
}

cmd_clean_volumes() {
    log "WARNING" "‚ö†Ô∏è  Isso ir√° remover TODOS os volumes Docker!"
    read -p "Tem certeza que deseja continuar? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "INFO" "Removendo todos os volumes Docker..."
        
        # Parar containers primeiro
        cd "$PROJECT_DIR"
        docker compose down -v 2>/dev/null || true
        
        # Remover volumes √≥rf√£os
        docker volume prune -f
        
        # Remover todos os volumes
        if docker volume ls -q | wc -l | grep -q "0"; then
            log "INFO" "Nenhum volume encontrado"
        else
            docker volume rm $(docker volume ls -q) 2>/dev/null || true
            log "SUCCESS" "Todos os volumes Docker removidos!"
        fi
    else
        log "INFO" "Opera√ß√£o cancelada"
    fi
}

cmd_clean_all() {
    log "WARNING" "‚ö†Ô∏è  LIMPEZA TOTAL: Containers, Imagens e Volumes!"
    echo -e "${RED}ATEN√á√ÉO: Isso ir√° remover:${NC}"
    echo -e "‚Ä¢ ${YELLOW}Todos os containers${NC}"
    echo -e "‚Ä¢ ${YELLOW}Todas as imagens Docker${NC}"
    echo -e "‚Ä¢ ${YELLOW}Todos os volumes Docker${NC}"
    echo -e "‚Ä¢ ${YELLOW}Redes √≥rf√£s${NC}"
    echo -e "‚Ä¢ ${YELLOW}Cache de build${NC}"
    echo ""
    read -p "Tem certeza que deseja continuar? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "INFO" "Iniciando limpeza completa..."
        
        cd "$PROJECT_DIR"
        
        # 1. Parar e remover containers
        log "INFO" "1/5 - Parando e removendo containers..."
        docker compose down -v --remove-orphans 2>/dev/null || true
        docker container prune -f
        
        # 2. Remover imagens
        log "INFO" "2/5 - Removendo imagens..."
        if ! docker images -q | wc -l | grep -q "0"; then
            docker rmi $(docker images -q) -f 2>/dev/null || true
        fi
        
        # 3. Remover volumes
        log "INFO" "3/5 - Removendo volumes..."
        docker volume prune -f
        if ! docker volume ls -q | wc -l | grep -q "0"; then
            docker volume rm $(docker volume ls -q) 2>/dev/null || true
        fi
        
        # 4. Remover redes
        log "INFO" "4/5 - Removendo redes..."
        docker network prune -f
        
        # 5. Limpeza geral do sistema
        log "INFO" "5/5 - Limpeza final do sistema..."
        docker system prune -a -f --volumes
        
        log "SUCCESS" "üßπ Limpeza completa do Docker finalizada!"
        echo ""
        echo -e "${GREEN}‚úÖ Containers removidos${NC}"
        echo -e "${GREEN}‚úÖ Imagens removidas${NC}"
        echo -e "${GREEN}‚úÖ Volumes removidos${NC}"
        echo -e "${GREEN}‚úÖ Redes limpas${NC}"
        echo -e "${GREEN}‚úÖ Cache limpo${NC}"
        echo ""
        echo -e "${YELLOW}üí° Para reiniciar o projeto: ${CYAN}./scripts/dev.sh setup${NC}"
        
    else
        log "INFO" "Opera√ß√£o cancelada"
    fi
}

cmd_shell() {
    local service="${1:-$BACKEND_SERVICE}"
    log "INFO" "Acessando shell do container: $service"
    check_containers
    run_in_container "$service" bash
}

cmd_health() {
    log "INFO" "Executando diagn√≥stico completo do sistema..."
    
    cd "$PROJECT_DIR"
    
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                 üè• DIAGN√ìSTICO DO SISTEMA üè•               ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    local overall_health=true
    local warnings_count=0
    local errors_count=0
    
    # 1. Verificar depend√™ncias do sistema
    log "INFO" "1. üîß Verificando depend√™ncias do sistema..."
    echo ""
    
    # Executar verifica√ß√£o de depend√™ncias (sem sair em caso de erro)
    local deps_ok=true
    check_dependencies || deps_ok=false
    
    if [ "$deps_ok" = false ]; then
        overall_health=false
        errors_count=$((errors_count + 1))
    fi
    
    echo ""
    
    # 2. Verificar arquivos de configura√ß√£o
    log "INFO" "2. üìÅ Verificando arquivos de configura√ß√£o..."
    
    if [ ! -f "docker-compose.yml" ]; then
        log "ERROR" "‚ùå Arquivo docker-compose.yml n√£o encontrado"
        overall_health=false
        errors_count=$((errors_count + 1))
    else
        log "SUCCESS" "‚úÖ docker-compose.yml encontrado"
        
        # Verificar sintaxe do docker-compose
        if docker compose config &> /dev/null; then
            log "SUCCESS" "‚úÖ docker-compose.yml v√°lido"
        else
            log "ERROR" "‚ùå docker-compose.yml cont√©m erros de sintaxe"
            overall_health=false
            errors_count=$((errors_count + 1))
        fi
    fi
    
    # Verificar outros arquivos importantes
    local important_files=("backend/package.json" "backend/Dockerfile" "backend/prisma/schema.prisma")
    for file in "${important_files[@]}"; do
        if [ -f "$file" ]; then
            log "SUCCESS" "‚úÖ $file encontrado"
        else
            log "WARNING" "‚ö†Ô∏è  $file n√£o encontrado"
            warnings_count=$((warnings_count + 1))
        fi
    done
    
    echo ""
    
    # 3. Verificar status dos containers de forma mais robusta
    log "INFO" "3. üê≥ Verificando status dos containers..."
    
    local containers_info=""
    local postgres_running=false
    local backend_running=false
    local pgadmin_running=false
    
    # M√©todo mais robusto para verificar containers
    if command -v docker &> /dev/null && docker info &> /dev/null; then
        # Tentar docker compose ps primeiro
        if docker compose version &> /dev/null 2>&1; then
            containers_info=$(docker compose ps --format "table {{.Service}}\t{{.State}}\t{{.Status}}" 2>/dev/null || echo "")
        elif command -v docker-compose &> /dev/null; then
            containers_info=$(docker-compose ps --format "table {{.Service}}\t{{.State}}\t{{.Status}}" 2>/dev/null || echo "")
        fi
        
        # Verificar servi√ßos espec√≠ficos usando m√∫ltiplos m√©todos
        
        # PostgreSQL
        if docker ps --filter "status=running" --format "{{.Names}}" 2>/dev/null | grep -q postgres; then
            postgres_running=true
        fi
        
        # Backend
        if docker ps --filter "status=running" --format "{{.Names}}" 2>/dev/null | grep -q backend; then
            backend_running=true
        fi
        
        # pgAdmin
        if docker ps --filter "status=running" --format "{{.Names}}" 2>/dev/null | grep -q pgadmin; then
            pgadmin_running=true
        fi
        
        # Exibir informa√ß√µes dos containers
        if [ -n "$containers_info" ]; then
            echo "$containers_info"
            echo ""
        fi
        
        # Status individual dos servi√ßos
        if [ "$postgres_running" = true ]; then
            log "SUCCESS" "‚úÖ PostgreSQL: Rodando"
        else
            log "ERROR" "‚ùå PostgreSQL: Parado"
            overall_health=false
            errors_count=$((errors_count + 1))
        fi
        
        if [ "$backend_running" = true ]; then
            log "SUCCESS" "‚úÖ Backend: Rodando"
        else
            log "ERROR" "‚ùå Backend: Parado"
            overall_health=false
            errors_count=$((errors_count + 1))
        fi
        
        if [ "$pgadmin_running" = true ]; then
            log "SUCCESS" "‚úÖ pgAdmin: Rodando"
        else
            log "WARNING" "‚ö†Ô∏è  pgAdmin: Parado (opcional)"
            warnings_count=$((warnings_count + 1))
        fi
        
    else
        log "ERROR" "‚ùå Docker n√£o est√° dispon√≠vel ou daemon n√£o est√° rodando"
        overall_health=false
        errors_count=$((errors_count + 1))
    fi
    
    echo ""
    
    # 4. Verificar conectividade do banco de dados
    log "INFO" "4. üóÑÔ∏è  Verificando conectividade do banco de dados..."
    
    if [ "$postgres_running" = true ]; then
        # M√∫ltiplas tentativas de verificar o banco
        local db_accessible=false
        
        # M√©todo 1: pg_isready
        if docker compose exec -T postgres pg_isready -q 2>/dev/null; then
            db_accessible=true
            log "SUCCESS" "‚úÖ Banco de dados est√° acess√≠vel (pg_isready)"
        # M√©todo 2: conex√£o simples
        elif docker compose exec -T postgres psql -U postgres -d canada_intercambio_db -c "SELECT 1;" &>/dev/null; then
            db_accessible=true
            log "SUCCESS" "‚úÖ Banco de dados est√° acess√≠vel (conex√£o direta)"
        else
            log "ERROR" "‚ùå Banco de dados n√£o est√° acess√≠vel"
            overall_health=false
            errors_count=$((errors_count + 1))
        fi
        
        # Verificar se o banco espec√≠fico existe
        if [ "$db_accessible" = true ]; then
            if docker compose exec -T postgres psql -U postgres -l 2>/dev/null | grep -q "canada_intercambio_db"; then
                log "SUCCESS" "‚úÖ Database 'canada_intercambio_db' existe"
            else
                log "WARNING" "‚ö†Ô∏è  Database 'canada_intercambio_db' n√£o encontrada"
                warnings_count=$((warnings_count + 1))
            fi
        fi
    else
        log "ERROR" "‚ùå Container PostgreSQL n√£o est√° rodando"
    fi
    
    echo ""
    
    # 5. Verificar backend API
    log "INFO" "5. üåê Verificando backend API..."
    
    if [ "$backend_running" = true ]; then
        # Verificar se API est√° respondendo usando a rota /ping
        if command -v curl &> /dev/null; then
            local response
            if response=$(curl -s --max-time 5 http://localhost:3000/ping 2>/dev/null); then
                if [ "$response" = "pong" ]; then
                    log "SUCCESS" "‚úÖ Backend API respondendo em http://localhost:3000/ping"
                else
                    log "WARNING" "‚ö†Ô∏è  Backend respondeu mas com conte√∫do inesperado: $response"
                    warnings_count=$((warnings_count + 1))
                fi
            else
                log "ERROR" "‚ùå Backend API n√£o est√° respondendo na porta 3000"
                errors_count=$((errors_count + 1))
                overall_health=false
            fi
        else
            log "WARNING" "‚ö†Ô∏è  curl n√£o dispon√≠vel - n√£o foi poss√≠vel testar API"
            warnings_count=$((warnings_count + 1))
        fi
    else
        log "ERROR" "‚ùå Container Backend n√£o est√° rodando"
        errors_count=$((errors_count + 1))
        overall_health=false
    fi
    
    echo ""
    
    # 6. Verificar portas do sistema
    log "INFO" "6. üîå Verificando portas do sistema..."
    
    local ports_check=()
    if command -v netstat &> /dev/null; then
        # Verificar porta 3000 (Backend)
        if netstat -tuln 2>/dev/null | grep -E '(:3000|\.3000)' >/dev/null; then
            if [ "$backend_running" = true ]; then
                ports_check+=("‚úÖ Porta 3000 (Backend) - Servi√ßo funcionando")
            else
                ports_check+=("‚ùå Porta 3000 (Backend) - Ocupada por outro processo")
            fi
        else
            if [ "$backend_running" = true ]; then
                ports_check+=("‚ö†Ô∏è  Porta 3000 (Backend) - Container rodando mas porta n√£o dispon√≠vel")
            else
                ports_check+=("‚ÑπÔ∏è  Porta 3000 (Backend) - Dispon√≠vel")
            fi
        fi
        
        # Verificar porta 5432 (PostgreSQL)
        if netstat -tuln 2>/dev/null | grep -E '(:5432|\.5432)' >/dev/null; then
            if [ "$postgres_running" = true ]; then
                ports_check+=("‚úÖ Porta 5432 (PostgreSQL) - Servi√ßo funcionando")
            else
                ports_check+=("‚ùå Porta 5432 (PostgreSQL) - Ocupada por outro processo")
            fi
        else
            if [ "$postgres_running" = true ]; then
                ports_check+=("‚ö†Ô∏è  Porta 5432 (PostgreSQL) - Container rodando mas porta n√£o dispon√≠vel")
            else
                ports_check+=("‚ÑπÔ∏è  Porta 5432 (PostgreSQL) - Dispon√≠vel")
            fi
        fi
        
        # Verificar porta 8080 (pgAdmin)
        if netstat -tuln 2>/dev/null | grep -E '(:8080|\.8080)' >/dev/null; then
            if [ "$pgadmin_running" = true ]; then
                ports_check+=("‚úÖ Porta 8080 (pgAdmin) - Servi√ßo funcionando")
            else
                ports_check+=("‚ùå Porta 8080 (pgAdmin) - Ocupada por outro processo")
            fi
        else
            if [ "$pgadmin_running" = true ]; then
                ports_check+=("‚ö†Ô∏è  Porta 8080 (pgAdmin) - Container rodando mas porta n√£o dispon√≠vel")
            else
                ports_check+=("‚ÑπÔ∏è  Porta 8080 (pgAdmin) - Dispon√≠vel")
            fi
        fi
    elif command -v ss &> /dev/null; then
        if ss -ln 2>/dev/null | grep -q ":3000"; then
            if [ "$backend_running" = true ]; then
                ports_check+=("‚úÖ Porta 3000 (Backend) - Servi√ßo funcionando")
            else
                ports_check+=("‚ùå Porta 3000 (Backend) - Ocupada por outro processo")
            fi
        else
            if [ "$backend_running" = true ]; then
                ports_check+=("‚ö†Ô∏è  Porta 3000 (Backend) - Container rodando mas porta n√£o dispon√≠vel")
            else
                ports_check+=("‚ÑπÔ∏è  Porta 3000 (Backend) - Dispon√≠vel")
            fi
        fi
        
        if ss -ln 2>/dev/null | grep -q ":5432"; then
            if [ "$postgres_running" = true ]; then
                ports_check+=("‚úÖ Porta 5432 (PostgreSQL) - Servi√ßo funcionando")
            else
                ports_check+=("‚ùå Porta 5432 (PostgreSQL) - Ocupada por outro processo")
            fi
        else
            if [ "$postgres_running" = true ]; then
                ports_check+=("‚ö†Ô∏è  Porta 5432 (PostgreSQL) - Container rodando mas porta n√£o dispon√≠vel")
            else
                ports_check+=("‚ÑπÔ∏è  Porta 5432 (PostgreSQL) - Dispon√≠vel")
            fi
        fi
        
        if ss -ln 2>/dev/null | grep -q ":8080"; then
            if [ "$pgadmin_running" = true ]; then
                ports_check+=("‚úÖ Porta 8080 (pgAdmin) - Servi√ßo funcionando")
            else
                ports_check+=("‚ùå Porta 8080 (pgAdmin) - Ocupada por outro processo")
            fi
        else
            if [ "$pgadmin_running" = true ]; then
                ports_check+=("‚ö†Ô∏è  Porta 8080 (pgAdmin) - Container rodando mas porta n√£o dispon√≠vel")
            else
                ports_check+=("‚ÑπÔ∏è  Porta 8080 (pgAdmin) - Dispon√≠vel")
            fi
        fi
    else
        ports_check+=("‚ö†Ô∏è  Ferramentas de verifica√ß√£o de porta n√£o dispon√≠veis (netstat/ss)")
        warnings_count=$((warnings_count + 1))
    fi
    
    for port_info in "${ports_check[@]}"; do
        echo "   $port_info"
    done
    
    echo ""
    
    # 7. Verificar recursos do sistema
    log "INFO" "7. üíª Verificando recursos do sistema..."
    
    # Verificar espa√ßo em disco
    local disk_usage=$(df -h . 2>/dev/null | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ -n "$disk_usage" ] && [ "$disk_usage" -gt 90 ]; then
        log "WARNING" "‚ö†Ô∏è  Espa√ßo em disco baixo: ${disk_usage}% usado"
        warnings_count=$((warnings_count + 1))
    elif [ -n "$disk_usage" ]; then
        log "SUCCESS" "‚úÖ Espa√ßo em disco OK: ${disk_usage}% usado"
    fi
    
    # Verificar mem√≥ria (se dispon√≠vel)
    if command -v free &> /dev/null; then
        local mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
        if [ -n "$mem_usage" ] && [ "$mem_usage" -gt 90 ]; then
            log "WARNING" "‚ö†Ô∏è  Uso de mem√≥ria alto: ${mem_usage}%"
            warnings_count=$((warnings_count + 1))
        elif [ -n "$mem_usage" ]; then
            log "SUCCESS" "‚úÖ Uso de mem√≥ria OK: ${mem_usage}%"
        fi
    fi
    
    echo ""
    
    # 8. Resumo final do diagn√≥stico
    log "INFO" "8. üìä Resumo do diagn√≥stico:"
    echo ""
    
    if [ "$overall_health" = true ] && [ "$errors_count" -eq 0 ]; then
        echo -e "${GREEN}üéâ SISTEMA EST√Å FUNCIONANDO PERFEITAMENTE!${NC}"
        
        if [ "$warnings_count" -eq 0 ]; then
            echo -e "${GREEN}   Nenhum problema encontrado.${NC}"
        else
            echo -e "${YELLOW}   $warnings_count aviso(s) encontrado(s), mas n√£o afetam o funcionamento.${NC}"
        fi
        
        echo ""
        echo -e "${CYAN}üîó Links √∫teis:${NC}"
        echo -e "   ‚Ä¢ Backend: ${CYAN}http://localhost:3000${NC}"
        echo -e "   ‚Ä¢ Backend Health: ${CYAN}http://localhost:3000/health${NC}"
        echo -e "   ‚Ä¢ pgAdmin: ${CYAN}http://localhost:8080${NC}"
        echo -e "   ‚Ä¢ Prisma Studio: ${CYAN}./scripts/dev.sh db:studio${NC}"
        
    elif [ "$errors_count" -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  SISTEMA FUNCIONANDO COM AVISOS${NC}"
        echo -e "${YELLOW}   $warnings_count aviso(s) encontrado(s).${NC}"
        echo ""
        echo -e "${CYAN}üîó Links dispon√≠veis:${NC}"
        if [ "$backend_running" = true ]; then
            echo -e "   ‚Ä¢ Backend: ${CYAN}http://localhost:3000${NC}"
        fi
        if [ "$pgadmin_running" = true ]; then
            echo -e "   ‚Ä¢ pgAdmin: ${CYAN}http://localhost:8080${NC}"
        fi
        
    else
        echo -e "${RED}‚ùå SISTEMA COM PROBLEMAS${NC}"
        echo -e "${RED}   $errors_count erro(s) e $warnings_count aviso(s) encontrado(s).${NC}"
        echo ""
        echo -e "${YELLOW}üîß A√ß√µes recomendadas:${NC}"
        
        if ! command -v docker &> /dev/null || ! docker info &> /dev/null; then
            echo -e "   1. ${CYAN}Instalar/iniciar Docker${NC}"
        fi
        
        if [ "$postgres_running" = false ] || [ "$backend_running" = false ]; then
            echo -e "   2. ${CYAN}./scripts/dev.sh up${NC} - Iniciar containers"
        fi
        
        if [ "$postgres_running" = false ]; then
            echo -e "   3. ${CYAN}./scripts/dev.sh logs postgres${NC} - Ver logs do PostgreSQL"
        fi
        
        if [ "$backend_running" = false ]; then
            echo -e "   4. ${CYAN}./scripts/dev.sh logs backend${NC} - Ver logs do Backend"
        fi
        
        echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh status${NC} - Ver status detalhado"
        echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh setup${NC} - Setup completo do projeto"
        echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh rebuild${NC} - Rebuild dos containers"
    fi
    
    echo ""
    echo -e "${PURPLE}üìã Comandos √∫teis para diagn√≥stico:${NC}"
    echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh status${NC} - Status dos containers"
    echo -e "   ‚Ä¢ ${CYAN}./scripts/dev.sh logs${NC} - Ver todos os logs"
    echo -e "   ‚Ä¢ ${CYAN}docker compose ps${NC} - Status direto do compose"
    echo -e "   ‚Ä¢ ${CYAN}docker ps${NC} - Todos os containers rodando"
    
    echo ""
    
    # Retornar c√≥digo baseado na sa√∫de geral
    if [ "$overall_health" = true ] && [ "$errors_count" -eq 0 ]; then
        return 0
    else
        return 1
    fi
}

cmd_pgadmin() {
    cmd_db_info
}

# Comandos R√°pidos
cmd_fresh() {
    log "INFO" "üÜï Rein√≠cio completo (down + up + migrate)..."
    
    cd "$PROJECT_DIR"
    docker compose down
    docker compose up -d
    wait_for_services
    
    run_in_container "$BACKEND_SERVICE" npx prisma migrate dev
    run_in_container "$BACKEND_SERVICE" npx prisma generate
    
    log "SUCCESS" "‚úÖ Rein√≠cio completo finalizado!"
}

cmd_watch() {
    log "INFO" "üî• Iniciando modo desenvolvimento com hot reload..."
    log "INFO" "Arquivos ser√£o sincronizados automaticamente!"
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë                üî• HOT RELOAD ATIVO üî•                     ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${YELLOW}üìÅ Arquivos monitorados:${NC}"
    echo -e "   ‚Ä¢ ${CYAN}schema.prisma${NC} - Mudan√ßas refletem automaticamente"
    echo -e "   ‚Ä¢ ${CYAN}*.ts, *.js${NC} - Hot reload no backend"
    echo -e "   ‚Ä¢ ${CYAN}Todos os arquivos${NC} - Sincroniza√ß√£o instant√¢nea"
    echo ""
    echo -e "${YELLOW}üí° Para testar:${NC}"
    echo -e "   1. Edite ${CYAN}backend/prisma/schema.prisma${NC}"
    echo -e "   2. Execute: ${CYAN}./scripts/dev.sh db:migrate${NC} (em outro terminal)"
    echo -e "   3. Veja a m√°gica acontecer! ‚ú®"
    echo ""
    echo -e "${YELLOW}üîß URLs √∫teis:${NC}"
    echo -e "   ‚Ä¢ Backend: ${CYAN}http://localhost:3000${NC}"
    echo -e "   ‚Ä¢ Prisma Studio: ${CYAN}./scripts/dev.sh db:studio${NC}"
    echo ""
    echo -e "${RED}‚èπÔ∏è  Pressione Ctrl+C para parar${NC}"
    echo ""
    
    check_containers
    
    # Follow logs para ver o hot reload em a√ß√£o
    cd "$PROJECT_DIR"
    docker compose logs -f backend
}

# Main - processar argumentos
main() {
    case "${1:-help}" in
        # Docker commands
        "up") cmd_up ;;
        "down") cmd_down ;;
        "restart") cmd_restart ;;
        "rebuild") cmd_rebuild ;;
        "logs") cmd_logs "$2" ;;
        "status") cmd_status ;;
        
        # Database commands
        "db:setup") cmd_db_setup ;;
        "db:migrate") cmd_db_migrate "${2:-}" ;;
        "db:push") cmd_db_push ;;
        "db:list") cmd_db_list ;;
        "db:reset") cmd_db_reset ;;
        "db:seed") cmd_db_seed ;;
        "db:studio") cmd_db_studio ;;
        "db:backup") cmd_db_backup ;;
        "db:restore") cmd_db_restore "${2:-}" ;;
        "db:info") cmd_db_info ;;
        
        # Development commands
        "setup") cmd_setup ;;
        "dev") cmd_dev ;;
        "build") cmd_build ;;
        "test") cmd_test ;;
        "lint") cmd_lint ;;
        "format") cmd_format ;;
        
        # Frontend commands
        "frontend:dev") cmd_frontend_dev ;;
        "frontend:build") cmd_frontend_build ;;
        "frontend:ios") cmd_frontend_ios ;;
        "frontend:android") cmd_frontend_android ;;
        
        # Utility commands
        "fresh") cmd_fresh ;;
        "watch") cmd_watch ;;
        "shell") cmd_shell "${2:-}" ;;
        "clean") cmd_clean ;;
        "clean:images") cmd_clean_images ;;
        "clean:volumes") cmd_clean_volumes ;;
        "clean:all") cmd_clean_all ;;
        "health") cmd_health ;;
        "pgadmin") cmd_pgadmin ;;
        
        # Help
        "help"|*) show_help ;;
    esac
}

# Trap para cleanup
trap 'log "INFO" "Script interrompido"' INT TERM

# Executar main
main "$@"
